/* import React, { useState } from 'react';
import { Eye, EyeOff, ArrowLeft } from 'lucide-react';

const AuthApp = () => {
  const [currentView, setCurrentView] = useState('login');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  
  // Login form state
  const [loginData, setLoginData] = useState({
    emailOrUsername: '',
    password: ''
  });
  
  // Register form state
  const [registerData, setRegisterData] = useState({
    fullName: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: '',
    department: '',
    securityQuestion: '',
    securityAnswer: '',
    twoFactorMethod: 'email'
  });

  // Reset password state
  const [resetData, setResetData] = useState({
    emailOrPhone: '',
    newPassword: ''
  });

  const departments = [
    'Select Department',
    'Human Resources',
    'Information Technology',
    'Finance',
    'Marketing',
    'Operations',
    'Sales',
    'Customer Service'
  ];

  const securityQuestions = [
    'Select Security Question',
    'What was your first pet\'s name?',
    'In what city were you born?',
    'What is your mother\'s maiden name?',
    'What was the name of your first school?',
    'What is your favorite book?'
  ];

  const handleLoginChange = (e) => {
    setLoginData({
      ...loginData,
      [e.target.name]: e.target.value
    });
  };

  const handleRegisterChange = (e) => {
    setRegisterData({
      ...registerData,
      [e.target.name]: e.target.value
    });
  };

  const handleResetChange = (e) => {
    setResetData({
      ...resetData,
      [e.target.name]: e.target.value
    });
  };

  const handleLoginSubmit = () => {
    console.log('Login submitted:', loginData);
    alert('Login form submitted! Check console for data.');
  };

  const handleRegisterSubmit = () => {
    if (registerData.password !== registerData.confirmPassword) {
      alert('Passwords do not match!');
      return;
    }
    if (!registerData.department || registerData.department === 'Select Department') {
      alert('Please select a department!');
      return;
    }
    if (!registerData.securityQuestion || registerData.securityQuestion === 'Select Security Question') {
      alert('Please select a security question!');
      return;
    }
    console.log('Register submitted:', registerData);
    alert('Registration form submitted! Check console for data.');
  };

  const handleResetSubmit = () => {
    console.log('Reset password submitted:', resetData);
    alert('Password reset form submitted! Check console for data.');
  };

  const LoginComponent = () => (
    <div className="auth-container">
      <div className="auth-card">
        <h2 className="auth-title">Login</h2>
        
        <div className="form-group">
          <input
            type="text"
            name="emailOrUsername"
            placeholder="Email or Username"
            value={loginData.emailOrUsername}
            onChange={handleLoginChange}
            className="auth-input"
          />
        </div>
        
        <div className="form-group password-group">
          <input
            type={showPassword ? 'text' : 'password'}
            name="password"
            placeholder="Password"
            value={loginData.password}
            onChange={handleLoginChange}
            className="auth-input"
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="password-toggle"
          >
            {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
          </button>
        </div>
        
        <button
          onClick={() => setCurrentView('reset')}
          className="forgot-password-link"
        >
          Forgot Password?
        </button>
        
        <button
          onClick={handleLoginSubmit}
          className="auth-button primary"
        >
          Submit
        </button>
        
        <div className="auth-switch">
          <span>Don't have an account? </span>
          <button
            onClick={() => setCurrentView('register')}
            className="switch-link"
          >
            Register here
          </button>
        </div>
      </div>
    </div>
  );

  const RegisterComponent = () => (
    <div className="auth-container">
      <div className="auth-card register-card">
        <div className="auth-header">
          <button
            onClick={() => setCurrentView('login')}
            className="back-button"
          >
            <ArrowLeft size={20} />
          </button>
          <h2 className="auth-title">Register</h2>
        </div>
        
        <div className="form-group">
          <input
            type="text"
            name="fullName"
            placeholder="Full Name"
            value={registerData.fullName}
            onChange={handleRegisterChange}
            className="auth-input"
          />
        </div>
        
        <div className="form-group">
          <input
            type="email"
            name="email"
            placeholder="Email Address"
            value={registerData.email}
            onChange={handleRegisterChange}
            className="auth-input"
          />
        </div>
        
        <div className="form-group">
          <input
            type="tel"
            name="phone"
            placeholder="Phone Number"
            value={registerData.phone}
            onChange={handleRegisterChange}
            className="auth-input"
          />
        </div>
        
        <div className="form-group password-group">
          <input
            type={showPassword ? 'text' : 'password'}
            name="password"
            placeholder="Password"
            value={registerData.password}
            onChange={handleRegisterChange}
            className="auth-input"
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="password-toggle"
          >
            {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
          </button>
        </div>
        
        <div className="form-group password-group">
          <input
            type={showConfirmPassword ? 'text' : 'password'}
            name="confirmPassword"
            placeholder="Confirm Password"
            value={registerData.confirmPassword}
            onChange={handleRegisterChange}
            className="auth-input"
          />
          <button
            type="button"
            onClick={() => setShowConfirmPassword(!showConfirmPassword)}
            className="password-toggle"
          >
            {showConfirmPassword ? <EyeOff size={20} /> : <Eye size={20} />}
          </button>
        </div>
        
        <div className="form-group">
          <select
            name="department"
            value={registerData.department}
            onChange={handleRegisterChange}
            className="auth-select"
          >
            {departments.map((dept, index) => (
              <option key={index} value={dept} disabled={index === 0}>
                {dept}
              </option>
            ))}
          </select>
        </div>
        
        <div className="form-group">
          <select
            name="securityQuestion"
            value={registerData.securityQuestion}
            onChange={handleRegisterChange}
            className="auth-select"
          >
            {securityQuestions.map((question, index) => (
              <option key={index} value={question} disabled={index === 0}>
                {question}
              </option>
            ))}
          </select>
        </div>
        
        <div className="form-group">
          <input
            type="text"
            name="securityAnswer"
            placeholder="Security Answer"
            value={registerData.securityAnswer}
            onChange={handleRegisterChange}
            className="auth-input"
          />
        </div>
        
        <div className="form-group">
          <label className="section-label">Two-Factor Authentication:</label>
          <div className="radio-group">
            <label className="radio-option">
              <input
                type="radio"
                name="twoFactorMethod"
                value="email"
                checked={registerData.twoFactorMethod === 'email'}
                onChange={handleRegisterChange}
              />
              <span className="radio-text">Email Verification</span>
            </label>
            <label className="radio-option">
              <input
                type="radio"
                name="twoFactorMethod"
                value="phone"
                checked={registerData.twoFactorMethod === 'phone'}
                onChange={handleRegisterChange}
              />
              <span className="radio-text">Phone Verification</span>
            </label>
          </div>
        </div>
        
        <button
          onClick={handleRegisterSubmit}
          className="auth-button primary"
        >
          Register
        </button>
        
        <div className="auth-switch">
          <span>Already have an account? </span>
          <button
            onClick={() => setCurrentView('login')}
            className="switch-link"
          >
            Login here
          </button>
        </div>
      </div>
    </div>
  );

  const ResetPasswordComponent = () => (
    <div className="auth-container">
      <div className="auth-card">
        <div className="auth-header">
          <button
            onClick={() => setCurrentView('login')}
            className="back-button"
          >
            <ArrowLeft size={20} />
          </button>
          <h2 className="auth-title">Reset Password</h2>
        </div>
        
        <div className="form-group">
          <input
            type="text"
            name="emailOrPhone"
            placeholder="Email or Phone Number"
            value={resetData.emailOrPhone}
            onChange={handleResetChange}
            className="auth-input"
          />
        </div>
        
        <div className="form-group password-group">
          <input
            type={showNewPassword ? 'text' : 'password'}
            name="newPassword"
            placeholder="New Password"
            value={resetData.newPassword}
            onChange={handleResetChange}
            className="auth-input"
          />
          <button
            type="button"
            onClick={() => setShowNewPassword(!showNewPassword)}
            className="password-toggle"
          >
            {showNewPassword ? <EyeOff size={20} /> : <Eye size={20} />}
          </button>
        </div>
        
        <button
          onClick={handleResetSubmit}
          className="auth-button primary"
        >
          Reset Password
        </button>
        
        <div className="auth-switch">
          <span>Remember your password? </span>
          <button
            onClick={() => setCurrentView('login')}
            className="switch-link"
          >
            Back to Login
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <>
      <style jsx>{`
        .auth-container {
          min-height: 100vh;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 20px;
          position: relative;
          overflow: hidden;
        }

        .auth-container::before {
          content: '';
          position: absolute;
          top: -50%;
          left: -20%;
          width: 60%;
          height: 200%;
          background: linear-gradient(45deg, #00bcd4, #2196f3);
          transform: rotate(15deg);
          border-radius: 50px;
          z-index: 1;
        }

        .auth-container::after {
          content: '';
          position: absolute;
          bottom: -50%;
          right: -20%;
          width: 60%;
          height: 200%;
          background: linear-gradient(45deg, #2196f3, #00bcd4);
          transform: rotate(15deg);
          border-radius: 50px;
          z-index: 1;
        }

        .auth-card {
          background: white;
          border-radius: 20px;
          padding: 40px;
          box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
          width: 100%;
          max-width: 400px;
          position: relative;
          z-index: 2;
        }

        .register-card {
          max-width: 450px;
          max-height: 90vh;
          overflow-y: auto;
        }

        .auth-header {
          display: flex;
          align-items: center;
          margin-bottom: 30px;
        }

        .back-button {
          background: none;
          border: none;
          color: #666;
          cursor: pointer;
          padding: 8px;
          margin-right: 15px;
          border-radius: 50%;
          transition: background-color 0.3s;
        }

        .back-button:hover {
          background-color: #f0f0f0;
        }

        .auth-title {
          font-size: 28px;
          font-weight: 600;
          color: #333;
          margin: 0;
          text-align: center;
          flex: 1;
        }

        .form-group {
          margin-bottom: 20px;
          position: relative;
        }

        .auth-input {
          width: 100%;
          padding: 15px;
          border: none;
          border-bottom: 2px solid #e0e0e0;
          font-size: 16px;
          outline: none;
          transition: border-color 0.3s;
          background: transparent;
        }

        .auth-input:focus {
          border-bottom-color: #00bcd4;
        }

        .auth-input::placeholder {
          color: #999;
        }

        .auth-select {
          width: 100%;
          padding: 15px;
          border: none;
          border-bottom: 2px solid #e0e0e0;
          font-size: 16px;
          outline: none;
          transition: border-color 0.3s;
          background: transparent;
          cursor: pointer;
        }

        .auth-select:focus {
          border-bottom-color: #00bcd4;
        }

        .password-group {
          display: flex;
          align-items: center;
        }

        .password-toggle {
          background: none;
          border: none;
          color: #666;
          cursor: pointer;
          padding: 8px;
          margin-left: 10px;
          border-radius: 50%;
          transition: background-color 0.3s;
        }

        .password-toggle:hover {
          background-color: #f0f0f0;
        }

        .section-label {
          font-size: 14px;
          color: #666;
          margin-bottom: 10px;
          display: block;
        }

        .radio-group {
          display: flex;
          gap: 20px;
          margin-top: 10px;
        }

        .radio-option {
          display: flex;
          align-items: center;
          cursor: pointer;
        }

        .radio-option input[type="radio"] {
          margin-right: 8px;
          accent-color: #00bcd4;
        }

        .radio-text {
          font-size: 14px;
          color: #666;
        }

        .forgot-password-link {
          background: none;
          border: none;
          color: #00bcd4;
          cursor: pointer;
          font-size: 14px;
          margin-bottom: 25px;
          text-decoration: underline;
          transition: color 0.3s;
        }

        .forgot-password-link:hover {
          color: #0097a7;
        }

        .auth-button {
          width: 100%;
          padding: 15px;
          border: none;
          border-radius: 8px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s;
          text-transform: uppercase;
          letter-spacing: 1px;
        }

        .auth-button.primary {
          background: #00bcd4;
          color: white;
        }

        .auth-button.primary:hover {
          background: #0097a7;
          transform: translateY(-2px);
          box-shadow: 0 5px 15px rgba(0, 188, 212, 0.3);
        }

        .auth-switch {
          text-align: center;
          margin-top: 25px;
          font-size: 14px;
          color: #666;
        }

        .switch-link {
          background: none;
          border: none;
          color: #00bcd4;
          cursor: pointer;
          text-decoration: underline;
          transition: color 0.3s;
        }

        .switch-link:hover {
          color: #0097a7;
        }

        @media (max-width: 480px) {
          .auth-card {
            padding: 30px 20px;
            margin: 10px;
          }
          
          .auth-title {
            font-size: 24px;
          }
        }
      `}</style>
      
      {currentView === 'login' && <LoginComponent />}
      {currentView === 'register' && <RegisterComponent />}
      {currentView === 'reset' && <ResetPasswordComponent />}
    </>
  );
};

export default AuthApp; */